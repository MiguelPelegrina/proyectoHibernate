/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.event.MouseAdapter;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import model.Alumnos;
import model.Matriculas;
import static view.Principal.controlAlumno;

/**
 *
 * @author migup
 */
public class GestionAlumnos extends javax.swing.JDialog {
    //Declaracion de variables
    private Principal padre;
    private DefaultTableModel dtmAlumnos;
    private String codigo;
    private String nombre;
    // Filtro de tabla
    private TableRowSorter<TableModel> filtroTabla;
    
    /**
     * Creates new form GestionAlumnos
     */
    public GestionAlumnos(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        // Configuramos la tabla Alumnos para rellenar los campos de texto
        dtmAlumnos = (DefaultTableModel) tablaAlumnos.getModel();
        tablaAlumnos.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tablaAlumnos.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = tablaAlumnos.rowAtPoint(evt.getPoint());
                if (row >= 0) {
                    codigo = (String) tablaAlumnos.getValueAt(row, 0);
                    nombre = (String) tablaAlumnos.getValueAt(row, 1);
                    txtCodigo.setText(codigo);
                    txtNombre.setText(nombre);
                }
            }
        });
        
        // Inicializamos el filtroTabla con el modelo de la tabla
        filtroTabla = new TableRowSorter<>(dtmAlumnos);
        // Asignamos a la tabla el rowSorter
        tablaAlumnos.setRowSorter(filtroTabla);
        // Rellenamos la tabla Alumnos
        padre = (Principal) parent;
        padre.rellenarTablaAlumnos(dtmAlumnos);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAlumnos = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnAlta = new javax.swing.JButton();
        btnBaja = new javax.swing.JButton();
        btnConsulta = new javax.swing.JButton();
        btnModificacion = new javax.swing.JButton();
        txtNombre = new javax.swing.JTextField();
        txtCodigo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFiltro = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tablaAlumnos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Alumno", "Nombre"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaAlumnos);

        jLabel1.setText("Código");

        jLabel2.setText("Nombre");

        btnAlta.setText("Alta");
        btnAlta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAltaActionPerformed(evt);
            }
        });

        btnBaja.setText("Baja");
        btnBaja.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBajaActionPerformed(evt);
            }
        });

        btnConsulta.setText("Consulta");
        btnConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaActionPerformed(evt);
            }
        });

        btnModificacion.setText("Modificación");
        btnModificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificacionActionPerformed(evt);
            }
        });

        jLabel3.setText("Alumno");

        jLabel4.setText("Código para consultar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAlta)
                        .addGap(18, 18, 18)
                        .addComponent(btnBaja)
                        .addGap(18, 18, 18)
                        .addComponent(btnModificacion))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(txtFiltro)
                                .addGap(18, 18, 18)
                                .addComponent(btnConsulta))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(txtNombre))))
                .addContainerGap(401, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCodigo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAlta)
                    .addComponent(btnBaja)
                    .addComponent(btnModificacion))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConsulta)
                    .addComponent(txtFiltro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(327, 327, 327))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAltaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAltaActionPerformed
        // Comprobamos que los campos de texto no esten vacios, sino informamos
        // al usuario
        if(!txtCodigo.getText().trim().equals("") && !txtNombre.getText().trim().equals("")){
            // Damos de alta el alumno
            controlAlumno.altaAlumno(new Alumnos(txtCodigo.getText(), txtNombre.getText()));
            // Actualizamos la tabla
            padre.rellenarTablaAlumnos(dtmAlumnos);
        }else{
            JOptionPane.showMessageDialog(this, "Los campos no pueden estar vacíos.");
        }        
    }//GEN-LAST:event_btnAltaActionPerformed

    private void btnBajaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBajaActionPerformed
        // Comprobamos que se haya elegido una fila, sino informamos al usuario
        if(tablaAlumnos.getSelectedRow() != -1){
            // Pedimos al usuario que nos confirme su decision de borrar datos
            int opcion = JOptionPane.showConfirmDialog(this, "¿Está seguro que"
                            + " quiere dar de baja el alumno con el codigo " 
                            + codigo + "?", "Dar de baja", JOptionPane.YES_NO_OPTION, 
                            JOptionPane.WARNING_MESSAGE,null);        
            if(opcion == 0){
                // Damos de baja el alumno
                controlAlumno.bajaAlumno(new Alumnos(codigo, nombre));
                // Actualizamos la tabla
                padre.rellenarTablaAlumnos(dtmAlumnos);
            }            
        }else{
            JOptionPane.showMessageDialog(null, "Debe elegir un alumno de la tabla");
        }            
    }//GEN-LAST:event_btnBajaActionPerformed

    private void btnModificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificacionActionPerformed
        // Comprobamos que los campos de texto no esten vacios, sino informamos
        // al usuario
        if(!txtCodigo.getText().trim().equals("") && !txtNombre.getText().trim().equals("")){
            // Pedimos al usuario que nos confirme su decicion de modificar datos
            int opcion = JOptionPane.showConfirmDialog(this, "¿Está seguro que"
                            + " quiere modificar los datos del alumno con el codigo " 
                            + codigo + "?", "Modificar", JOptionPane.YES_NO_OPTION, 
                            JOptionPane.WARNING_MESSAGE,null);   
            if(opcion == 0){
                // Modificamos el alumno
                controlAlumno.modificarAlumno(new Alumnos(txtCodigo.getText(), txtNombre.getText()));
                // Actualizamos la tabla
                padre.rellenarTablaAlumnos(dtmAlumnos);      
            }                      
        }else{
            JOptionPane.showMessageDialog(this, "Los campos no pueden estar vacíos.");       
        }
    }//GEN-LAST:event_btnModificacionActionPerformed

    private void btnConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaActionPerformed
        // Esta parte se diseñado como una vista maestro-detalle, siendo la 
        // tabla el maestro que muestra datos limitados y la consulta el detalle
        // que permite consultar una mayor cantidad de datos, como en este caso
        // los cursos en los que esta matriculado el alumno
        String codigoConsulta = txtFiltro.getText().trim();
        // Comprobamos el campo no este vacio
        if(codigoConsulta.length() == 0){
            JOptionPane.showMessageDialog(this,"Debe introducir primero un "
                    + "codigo antes de poder consultar",
                    "Instrucciones",JOptionPane.INFORMATION_MESSAGE);
        }else{
            try{
                // Consultamos el alumno deseado
                Alumnos alumno = controlAlumno.consultarAlumno(codigoConsulta);  
                // Obtenemos las matriculas del alumno
                ArrayList<Matriculas> listaMatriculas = alumno.getListMatriculas();
                String matriculas = "";
                if(!listaMatriculas.isEmpty()){    
                    matriculas += "\nCursos matriculados:";
                    for(Matriculas m : listaMatriculas){
                        matriculas += "\n   " + m.getId().getCcodcurso();
                    }  
                }              
                // Mostramos los datos obtenidos
                JOptionPane.showMessageDialog(null, "Datos del alumno: \n" + 
                        "Codigo: " + alumno.getCcodalu() + "\nNombre: " + 
                        alumno.getCnomalu() + matriculas);
                // Controlamos las excepciones
            }catch(NullPointerException npe){
                JOptionPane.showMessageDialog(null, "El alumno con el " + 
                            "codigo " + codigoConsulta + " no existe");
            }catch(Exception e){
                JOptionPane.showMessageDialog(this,"Se ha producido un error",
                        "Error",JOptionPane.ERROR_MESSAGE);
            }            
        }  
    }//GEN-LAST:event_btnConsultaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionAlumnos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GestionAlumnos dialog = new GestionAlumnos(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAlta;
    private javax.swing.JButton btnBaja;
    private javax.swing.JButton btnConsulta;
    private javax.swing.JButton btnModificacion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaAlumnos;
    private javax.swing.JTextField txtCodigo;
    private javax.swing.JTextField txtFiltro;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
